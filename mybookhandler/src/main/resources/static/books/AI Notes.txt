Fully observable if what your agent can sense at any time is completely sufficient to make
the optimal decision. 

Partially observable where you need memory on the side of the agent to make the best possible
decision.&nbsp; &nbsp;FIFTH EDIT TEST In deterministic models, the output of the model is fully determined 
by the parameter values and the initial conditions initial conditions. 

Stochastic models possess some inherent randomness. 
The same set of parameter values and initial conditions will lead to an 
ensemble of different outputs.

Discrete represents a finite number of values or moves. 

Continuous represents an environment where the possibility may be infinite. 

Benign environments the environment might be random, e.g. is weather

Adversarial, the environment is out to get you. e.g. chess you are trying to win

Definition of a problem
&gt;Initial State
&gt;Actions(S) -&gt; { a1, a2, a3 ....}
 state as input and returns a set of possible of actions it can execute when it is
 in this state
&gt;Result, a function that takes as input a state and action and delivers as its
 output a new state
&gt;GoalTest, a function that takes a state and returns a boolean telling us if this
 state is a goal or not
&gt;Path cost function, takes a path, a sequence of state action transitions and returns
 a number which is a cost of that path. 
 StepCost(S, A, RESULTINGSTATE) returns N which is cost of that action e.g no. mins

The frontier are the furthest out states we can explore.

Tree Search Function Example

function tree.search(problem):
  frontier = {[initial]}
  loop:
    if frontier isempty: return FAIL
    path = remove.choice(frontier)
    s = path.end
    if s is a goal : return path
    for a in actions:
        add [path + a -&gt; Result(s,a)]
        to frontier

Different path finding algorithms
-BREADTH-FIRST SEARCH opposite is DEPTH FIRST SEARCH
-GRAPH SEARCH cheapest FIRST SEARCH
-UNIFORM-COST SEARCH - Guaranteed to find path with cheapest cost search

DEPTH FIRST SEARCH IS NOT AN OPTIMAL SEARCH PATTERN
However, one may one to use this algorithm for saving space, for example
	0
    0	    0
Consider these nodes. In depth first search, we run to the 'depth' first we will
have N nodes compared to 2n nodes for Breadth first
With depth first search we will never find an infinite tree goal if we assume that
it is following a path other than that which the goal is on. Say for example
in our tree above if it is infinte, and our goal is on the left. If we start with the 
right, depth first search will never find it on the left as it will just keep going. 

A* search
How far do we have to go?
Always expanding the path with has the min value of f
f= g + h
g(path) + path cost so far
h(path) = h(s) = estimated distance to goal

We want to minimise g and h. 
*best estimated total path cost first*

A* will find the shortest path if h(s) &lt; true cost

Dijkstra Algorithm
Follows the shortest paths doesnt pay any direction. 

State Space
Set of all possible states for a given problem 

A* Search




